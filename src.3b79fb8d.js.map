{"version":3,"sources":["task1.js","task2.js","task3.js","index.js"],"names":["delay","ms","Promise","resolve","delayTime","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","myPage","document","querySelector","el","createElement","innerHTML","append","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","canProcess","id","logSuccess","some","logError","warn","amount","catch"],"mappings":";;;AAMA,MAAMA,EAAQC,GAGL,IAAIC,QAASC,IACZC,MAAAA,EAAYH,EAElBI,WAAW,KAEHD,GACAD,EAAQF,IAGbA,KAKDK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;ACzBjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAE5BC,MAAAA,EAAeF,EAASG,IAAIC,GAC/BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAEtDjB,OAAAA,QAAQC,QAAQc,IAKrBX,EAASW,GAAgBT,QAAQY,MAAMH,GAO7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GAEnC,MAAMe,EAASC,SAASC,cAAc,WACpBC,EAAKF,SAASG,cAAc,KAClCD,EAAGE,UAAY,WAEfL,EAAOM,OAAOH;;AC/B1B,MAAMI,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACfnC,MAAAA,EAAQ4B,EAA0B,IAAK,KAGtC,OAAA,IAAI1B,QAAQ,CAACC,EAASiC,KAEnBC,MAAAA,EAAaN,KAAKE,SAAW,GAGnC5B,WAAW,KAGHgC,GAAAA,EAAY,CAENC,MAAAA,EAAKH,EAAYG,GAEvBnC,EAAQ,CAACmC,GAAAA,EAAItC,MAAAA,IAGjBoC,EAAOD,EAAYG,KACpBtC,MAMLuC,EAAaC,GAAShC,QAAQC,mBAAmB+B,EAAKF,mBAAmBE,EAAKxC,WAE9EyC,EAAWH,GAAO9B,QAAQkC,qCAAqCJ,8BAOrEJ,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,MAC/BjC,KAAK6B,GACLK,MAAMH,GAETP,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,MAC/BjC,KAAK6B,GACLK,MAAMH,GAETP,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,KAC/BjC,KAAK6B,GACLK,MAAMH,GAETP,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,MAC/BjC,KAAK6B,GACLK,MAAMH;;ACpDT,aAJA,QAAA,oBAEA,QAAA,WACA,QAAA,WACA,QAAA","file":"src.3b79fb8d.js","sourceRoot":"../src","sourcesContent":["// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\n\n\n\nconst delay = ms => {\n  // Твой код\n  \n  return new Promise((resolve) => {\n    const delayTime = ms;\n\n    setTimeout(() => {\n      \n        if (delayTime) {\n            resolve(ms);\n        }\n     \n    }, ms);\n   \n  \n  })\n}\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback,\n//     а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    \n const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,);\n\n    return Promise.resolve(updatedUsers);\n      \n    \n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\nconst myPage = document.querySelector('.task-2');\n            const el = document.createElement('p');\n            el.innerHTML = '&#128580';\n\n            myPage.append(el);","// Перепиши функцию makeTransaction() так, \n// чтобы она не использовала callback - функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n  \n\n    return new Promise((resolve, reject) => {\n        \n        const canProcess = Math.random() > 0.3;\n        \n        \n        setTimeout(() => {\n\n            \n            if (canProcess) {\n\n                const id = transaction.id;\n                            \n                resolve({id, delay});\n            }\n\n            reject(transaction.id);\n        }, delay);\n       \n            \n    });\n};\n\nconst logSuccess = some =>  console.log(`Transaction ${some.id} processed in ${some.delay}ms`);\n\nconst logError = id =>  console.warn(`Error processing transaction ${id}. Please try again later.`);\n\n\n\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n\n\n//   const myPage = document.querySelector('.task-3');\n//             const el = document.createElement('p');\n//             el.innerHTML = '&#129335';\n\n//             myPage.append(el);","import './sass/main.scss';\n\nimport './task1';\nimport './task2';\nimport './task3';\n"]}